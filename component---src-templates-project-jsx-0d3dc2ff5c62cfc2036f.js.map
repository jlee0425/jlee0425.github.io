{"version":3,"sources":["webpack:///./src/components/slices/Head.jsx","webpack:///./src/components/slices/StyledComponents.js","webpack:///./src/components/slices/ImageText.jsx","webpack:///./src/components/slices/List.jsx","webpack:///./src/components/slices/ImageWithCaption.jsx","webpack:///./src/components/slices/TextWithTitle.jsx","webpack:///./src/components/SliceZone.jsx","webpack:///./src/templates/Project.jsx"],"names":["HeadContainer","styled","div","SummaryBox","HeaderTitle","h1","SubHead","Summary","CustomLink","a","Links","Head","title","date","summary","git","link","preview","url","SliceContainer","section","Content","Title","h3","Paragraph","p","ImageText","slice","title1","primary","fields","text","content","map","index","key","List","list","li","ImageWithCaption","TextWithTitle","body","SliceZone","slices","sliceComponents","PRISMIC_ProjectBodyImage_with_Caption","PRISMIC_ProjectBodyText_with_title","PRISMIC_ProjectBodyList","PRISMIC_ProjectBodyImage_text","SliceComponent","__typename","Container","pageQuery","Project","data","prismic","project"],"mappings":"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","file":"component---src-templates-project-jsx-0d3dc2ff5c62cfc2036f.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport IconLink from '../iconLink'\r\n\r\nconst HeadContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  @media (max-width: 1024px) {\r\n    flex-direction: column;\r\n  }\r\n`\r\nconst SummaryBox = styled.div`\r\n  width: 50%;\r\n  @media (max-width: 1024px) {\r\n    width: 100%;\r\n  }\r\n`\r\nconst HeaderTitle = styled.h1`\r\n  font-size: 2.5rem;\r\n  font-weight: 300;\r\n`\r\nconst SubHead = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  margin-bottom: 1.5rem;\r\n`\r\nconst Summary = styled.div``\r\nconst CustomLink = styled.a`\r\n  padding: 0 3px;\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  font-size: 0.9rem;\r\n  text-align: center;\r\n  background: rgb(30, 43, 49);\r\n  color: white;\r\n`\r\nconst Links = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  width: 20%;\r\n`\r\n\r\nconst Head = ({ title, date, summary, git, link, preview }) => {\r\n  return (\r\n    <HeadContainer>\r\n      <SummaryBox>\r\n        <HeaderTitle>{title}</HeaderTitle>\r\n        <hr />\r\n        <SubHead>\r\n          {date}\r\n          <Links>\r\n            {link && <CustomLink url={link}>DEMO</CustomLink>}\r\n            <IconLink git url={git} />\r\n          </Links>\r\n        </SubHead>\r\n        <Summary>{summary}</Summary>\r\n      </SummaryBox>\r\n      {/* <img src={preview.url} /> */}\r\n    </HeadContainer>\r\n  )\r\n}\r\n\r\nexport default Head\r\n","import styled from 'styled-components'\r\n\r\nexport const SliceContainer = styled.section`\r\n  margin-top: 5rem;\r\n`\r\nexport const ImageContainer = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\nexport const Content = styled.div`\r\n  padding: 0 8rem;\r\n  @media (max-width: 1024px) {\r\n    padding: 0 1rem;\r\n  }\r\n`\r\nexport const Title = styled.h3`\r\n  font-size: 2rem;\r\n  font-weight: 300;\r\n  margin: 1rem 0;\r\n`\r\nexport const Paragraph = styled.p``\r\n","import React from 'react'\r\n\r\nimport { SliceContainer, Content, Title, Paragraph } from './StyledComponents'\r\n\r\nconst ImageText = ({\r\n  slice: {\r\n    primary: { title1 },\r\n    fields\r\n  }\r\n}) => {\r\n  return (\r\n    <SliceContainer>\r\n      <Content>\r\n        <Title>{title1[0].text}</Title>\r\n        {fields[0].content.map((p, index) => (\r\n          <Paragraph key={index}>{p.text}</Paragraph>\r\n        ))}\r\n      </Content>\r\n    </SliceContainer>\r\n  )\r\n}\r\n\r\nexport default ImageText\r\n","import React from 'react'\r\n\r\nimport { SliceContainer, Content, Title } from './StyledComponents'\r\n\r\nconst List = ({\r\n  slice: {\r\n    primary: { title1, list }\r\n  }\r\n}) => {\r\n  return (\r\n    <SliceContainer>\r\n      <Content>\r\n        <Title>{title1[0].text}</Title>\r\n        {list.map((li, index) => (\r\n          <div key={index}>\r\n            {index + 1}. {li.text}\r\n          </div>\r\n        ))}\r\n      </Content>\r\n    </SliceContainer>\r\n  )\r\n}\r\n\r\nexport default List\r\n","import React from 'react'\r\n\r\nimport { SliceContainer, Content, Title } from './StyledComponents'\r\n\r\nconst ImageWithCaption = ({ slice }) => {\r\n  return <div></div>\r\n}\r\n\r\nexport default ImageWithCaption\r\n","import React from 'react'\r\n\r\nimport { SliceContainer, Content, Title, Paragraph } from './StyledComponents'\r\n\r\nconst TextWithTitle = ({ slice }) => {\r\n  return (\r\n    <SliceContainer>\r\n      <Content>\r\n        <Title>{slice.primary.title1[0].text}</Title>\r\n        {slice.primary.body.map((p, index) => (\r\n          <Paragraph key={index}>{p.text}</Paragraph>\r\n        ))}\r\n      </Content>\r\n    </SliceContainer>\r\n  )\r\n}\r\n\r\nexport default TextWithTitle\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { ImageWithCaption, TextWithTitle, List, ImageText } from './slices'\r\n\r\nconst SliceContainer = styled.div``\r\n\r\nconst SliceZone = ({ slices }) => {\r\n  const sliceComponents = {\r\n    PRISMIC_ProjectBodyImage_with_Caption: ImageWithCaption,\r\n    PRISMIC_ProjectBodyText_with_title: TextWithTitle,\r\n    PRISMIC_ProjectBodyList: List,\r\n    PRISMIC_ProjectBodyImage_text: ImageText\r\n  }\r\n  return (\r\n    slices &&\r\n    slices.map((slice, index) => {\r\n      const SliceComponent = sliceComponents[slice.__typename]\r\n      if (SliceComponent) {\r\n        return <SliceComponent slice={slice} key={`slice-${index}`} />\r\n      }\r\n      return null\r\n    })\r\n  )\r\n}\r\n\r\nexport default SliceZone\r\n","import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport styled from 'styled-components'\r\n\r\nimport { Head } from '../components/slices'\r\nimport SliceZone from '../components/SliceZone'\r\n\r\nconst Container = styled.div`\r\n  height: 100%;\r\n  margin: 5vh 0;\r\n  padding: 0 10rem;\r\n\r\n  @media (max-width: 1024px) {\r\n    padding: 0 2rem;\r\n  }\r\n`\r\n\r\nconst Project = ({ data: { prismic } }) => {\r\n  const { project: data } = prismic\r\n\r\n  return (\r\n    <Container>\r\n      <Head\r\n        title={data.title[0]?.text}\r\n        date={data.date[0]?.text}\r\n        summary={data.summary[0]?.text}\r\n        git={data.git?.url}\r\n        link={data.link?.url}\r\n      />\r\n      <SliceZone slices={data?.body} />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Project\r\n\r\nexport const pageQuery = graphql`\r\n  query PostBySlug($uid: String!) {\r\n    prismic {\r\n      project(lang: \"en-us\", uid: $uid) {\r\n        link {\r\n          ... on PRISMIC__ExternalLink {\r\n            url\r\n          }\r\n        }\r\n        git {\r\n          ... on PRISMIC__ExternalLink {\r\n            url\r\n          }\r\n        }\r\n        date\r\n        body {\r\n          ... on PRISMIC_ProjectBodyImage_text {\r\n            primary {\r\n              title1\r\n            }\r\n            fields {\r\n              img2\r\n              img1\r\n              content\r\n            }\r\n          }\r\n          ... on PRISMIC_ProjectBodyList {\r\n            primary {\r\n              list\r\n              title1\r\n            }\r\n          }\r\n          ... on PRISMIC_ProjectBodyImage_with_caption {\r\n            primary {\r\n              imageSharp {\r\n                childImageSharp {\r\n                  fluid {\r\n                    ...GatsbyImageSharpFluid\r\n                  }\r\n                }\r\n              }\r\n              caption\r\n            }\r\n          }\r\n          ... on PRISMIC_ProjectBodyText_with_title {\r\n            primary {\r\n              title1\r\n              body\r\n            }\r\n          }\r\n        }\r\n        preview\r\n        summary\r\n        title\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}